{"version":3,"sources":["pages/InspectedList.js","services/BackendService.js"],"names":["Dashboard","useState","requests","setRequests","isFetching","setIsFetching","columns","Search","SearchBar","dataField","text","sort","formatter","rowContent","row","to","pagination","paginationFactory","sizePerPage","hideSizePerPage","prePageText","nextPageText","withFirstAndLast","hidePageListOnlyOnePage","useEffect","BackendService","getInspectedList","then","response","console","log","data","JSON","parse","className","duration","height","count","bootstrap4","keyField","striped","condensed","defaultSorted","order","apiBase","process","axios","interceptors","request","use","config","user","localStorage","getItem","token","headers","Authorization","a","post","get"],"mappings":"uQAUe,SAASA,IACtB,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAGMC,GADgBC,SAAdC,UACQ,CAAC,CACfC,UAAW,UACXC,KAAM,sBACNC,MAAM,GACL,CACDF,UAAW,cACXC,KAAM,eACNC,MAAM,GACL,CACDF,UAAW,eACXC,KAAM,gBACNC,MAAM,GACL,CACDF,UAAW,kBACXC,KAAM,kBACNC,MAAM,GACL,CACDF,UAAW,UACXC,KAAM,UACNC,MAAM,GACL,CACDF,UAAW,cACXC,KAAM,cACNC,MAAM,GACL,CACDF,UAAW,OACXC,KAAM,OACNC,MAAM,GACL,CACDF,UAAW,cACXC,KAAM,cACNC,MAAM,GACL,CACDF,UAAW,QACXC,KAAM,gBACNC,MAAM,GACL,CACHF,UAAW,OACXC,KAAM,SACNE,UAAW,SAACC,EAAYC,GACtB,OACE,cAAC,IAAD,CAAMC,GAAG,QAAT,uBASEC,EAAaC,IAAkB,CACnCC,YAAa,GACbC,iBAAiB,EACjBC,YAAa,WACbC,aAAc,OACdC,kBAAkB,EAClBC,yBAAyB,IAczB,OAXFC,qBAAU,WACRC,IACGC,mBACAC,MAAK,SAACC,GACLvB,GAAc,GACdwB,QAAQC,IAAIF,EAASG,KAAKA,KAAKA,MAC/B5B,EAAY6B,KAAKC,MAAML,EAASG,KAAKA,KAAKA,OAC1CF,QAAQC,IAAI5B,QAEf,IAGG,qBAAKgC,UAAU,oCAAf,SACA,qBAAKA,UAAU,aAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,qBAAKA,UAAU,MAAf,SAEE,qBAAKA,UAAU,qCAAf,SACE,qBAAKA,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,aAAd,6BACA,qBAAKA,UAAU,mBAAf,SAEE9B,EACE,cAAC,IAAD,CAAU+B,SAAU,EAAGC,OAAQ,GAAIC,MAAO,IAE9C,mCACA,cAAC,IAAD,CACIC,YAAU,EACVC,SAAS,KACTR,KAAO7B,EACPsC,SAAO,EACPC,WAAS,EACTnC,QAAUA,EACVoC,cAhDA,CAAC,CACrBjC,UAAW,OACXkC,MAAO,SA+Ca3B,WAAaA,yB,8FC3G/B4B,EAAUC,6CAGhBC,IAAMC,aAAaC,QAAQC,KAAK,SAAAC,GAC9B,IAAMC,EAAOnB,KAAKC,MAAMmB,aAAaC,QAAQ,cAAgB,GAE7D,GAAGF,GAAQA,EAAKG,MAAM,CACpB,IAAMA,EAAQ,UAAYH,EAAKG,MAC/BJ,EAAOK,QAAQC,cAAiBF,EAElC,OAAOJ,K,IAGHzB,E,mIACJ,sBAAAgC,EAAA,sEACeX,IAAMY,KAAKd,EAAU,yBADpC,mF,2HAIA,sBAAAa,EAAA,sEACeX,IAAMY,KAAKd,EAAU,sBADpC,mF,+HAGA,WAA2Bb,GAA3B,SAAA0B,EAAA,sEACeX,IAAMY,KAAKd,EAAU,yBAA0Bb,GAD9D,mF,kIAGA,WAA6BA,GAA7B,SAAA0B,EAAA,sEACeX,IAAMY,KAAKd,EAAU,8BAA+Bb,GADnE,mF,4HAIA,sBAAA0B,EAAA,sEACeX,IAAMY,KAAKd,EAAU,uBADpC,mF,6HAIA,sBAAAa,EAAA,sEACeX,IAAMY,KAAKd,EAAU,wBADpC,mF,4HAIA,WAAwBb,GAAxB,SAAA0B,EAAA,sEACeX,IAAMY,KAAKd,EAAU,yBAA0Bb,GAD9D,mF,sHAIA,sBAAA0B,EAAA,sEACeX,IAAMa,IAAI,gBADzB,mF,wHAIA,sBAAAF,EAAA,sEACeX,IAAMa,IAAI,mBADzB,mF,6DAKa,QAAIlC","file":"static/js/11.942e6edb.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport BackendService from \"../services/BackendService\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport { Link } from 'react-router-dom';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton'\nimport 'react-loading-skeleton/dist/skeleton.css'\n\n\nexport default function Dashboard() {\n  const [requests, setRequests] = useState([]);\n  const [isFetching, setIsFetching] = useState(true);\n\n  const { SearchBar } = Search;\n  const columns = [{\n    dataField: 'User_ID',\n    text: 'Open For Inspection',\n    sort: true\n  }, {\n    dataField: 'RequestType',\n    text: 'Request Type',\n    sort: true\n  }, {\n    dataField: 'PropertyType',\n    text: 'Property Type',\n    sort: true\n  }, {\n    dataField: 'Classifications',\n    text: 'Classifications',\n    sort: true\n  }, {\n    dataField: 'User_ID',\n    text: 'User ID',\n    sort: true\n  }, {\n    dataField: 'Plot_Number',\n    text: 'Plot NUmber',\n    sort: true\n  }, {\n    dataField: 'Name',\n    text: 'Name',\n    sort: true\n  }, {\n    dataField: 'Unit_Number',\n    text: 'Unit Number',\n    sort: true\n  }, {\n    dataField: 'Email',\n    text: 'Email Address',\n    sort: true\n  }, {\n  dataField: 'link',\n  text: 'ACTION',\n  formatter: (rowContent, row) => {\n    return (\n      <Link to=\"edit/\">Check</Link>\n    )\n  }}];\n  \n  const defaultSorted = [{\n    dataField: 'name',\n    order: 'desc'\n  }];\n\n  const pagination = paginationFactory({\n    sizePerPage: 10,\n    hideSizePerPage: true,\n    prePageText: \"Previous\",\n    nextPageText: \"Next\",\n    withFirstAndLast: false,\n    hidePageListOnlyOnePage: false\n  });\n\n  useEffect(() => {\n    BackendService\n      .getInspectedList()\n      .then((response) => {\n        setIsFetching(false);\n        console.log(response.data.data.data);\n        setRequests(JSON.parse(response.data.data.data));\n        console.log(requests)\n      });\n  }, []);\n\n    return (\n        <div className=\"container-fluid page-body-wrapper\">\n        <div className=\"main-panel\">\n          <div className=\"content-wrapper\">\n            <div className=\"row\">\n\n              <div className=\"col-lg-12 grid-margin stretch-card\">\n                <div className=\"card\">\n                  <div className=\"card-body\">\n                    <h4 className=\"card-title\">Inspected List </h4>\n                    <div className=\"table-responsive\">\n                    \n                    { isFetching ? (\n                        <Skeleton duration={3} height={20} count={5} />\n                    ) : (\n                    <>\n                    <BootstrapTable\n                        bootstrap4\n                        keyField=\"id\"\n                        data={ requests }\n                        striped\n                        condensed\n                        columns={ columns }\n                        defaultSorted={ defaultSorted }\n                        pagination={ pagination } \n                      />\n                    </>\n                    ) }\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n          </div>\n        </div>\n        </div>\n    )\n}\n","import axios from 'axios';\n\nconst apiBase = process.env.REACT_APP_API_URL;\n\n// Add a request interceptor\naxios.interceptors.request.use( config => {\n  const user = JSON.parse(localStorage.getItem('userData')) || {};\n\n  if(user && user.token){\n    const token = 'Bearer ' + user.token;\n    config.headers.Authorization =  token;\n  }\n  return config;\n});\n\nclass BackendService {\n  async getDashBoard() {\n    return await axios.post(apiBase + \"/app/LoadAssignedList\");\n  }\n\n  async getScheduledList() {\n    return await axios.post(apiBase + \"/app/ScheduledList\");\n  }\n  async getLoadForInspection(data) {\n    return await axios.post(apiBase + \"/app/LoadForInspection\", data);\n  }\n  async InsertCheckListResults(data) {\n    return await axios.post(apiBase + \"/app/InsertCheckListResults\", data);\n  }\n\n  async getInspectedList() {\n    return await axios.post(apiBase + \"/app/VisitedHistory\");\n  }\n\n  async getReScheduledList() {\n    return await axios.post(apiBase + \"/app/ReScheduledList\");\n  }\n\n  async ScheduleSiteVisit(data) {\n    return await axios.post(apiBase + \"/app/ScheduleSiteVisit\", data);\n  }\n\n  async getPmBoard() {\n    return await axios.get(\"/api/test/pm\");\n  }\n\n  async getAdminBoard() {\n    return await axios.get(\"/api/test/admin\");\n  }\n}\n\nexport default new BackendService();"],"sourceRoot":""}