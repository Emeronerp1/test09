{"version":3,"sources":["pages/ReScheduledList.js","services/BackendService.js"],"names":["Dashboard","history","useHistory","useState","requests","setRequests","isFetching","setIsFetching","columns","Search","SearchBar","ClearSearchButton","dataField","text","sort","formatter","cell","row","rowIndex","formatExtraData","className","onClick","push","navigate","Plot_Number","pagination","paginationFactory","sizePerPage","hideSizePerPage","prePageText","nextPageText","withFirstAndLast","hidePageListOnlyOnePage","useEffect","BackendService","getReScheduledList","then","response","console","log","data","JSON","parse","duration","height","count","bootstrap4","keyField","striped","condensed","defaultSorted","order","apiBase","process","axios","interceptors","request","use","config","user","localStorage","getItem","token","headers","Authorization","a","post","get"],"mappings":"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","file":"static/js/12.cc953a1d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport BackendService from \"../services/BackendService\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport { useHistory } from 'react-router-dom';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton'\nimport 'react-loading-skeleton/dist/skeleton.css'\n\n\nexport default function Dashboard() {\n  const history = useHistory();\n  const [requests, setRequests] = useState([]);\n  const [isFetching, setIsFetching] = useState(true);\n\n  const navigate = (row) => {\n    history.push(`rescheduleVisit/edit/${row}`);\n  }\n  const { SearchBar, ClearSearchButton } = Search;\n  const columns = [{\n    dataField: 'RequestType',\n    text: 'Request Type',\n    sort: true\n  }, {\n    dataField: 'PropertyType',\n    text: 'Property Type',\n    sort: true\n  }, {\n    dataField: 'Classifications',\n    text: 'Classifications',\n    sort: true\n  }, {\n    dataField: 'Plot_Number',\n    text: 'Plot Number',\n    sort: true\n  }, {\n    dataField: 'Name',\n    text: 'Name',\n    sort: true\n  }, {\n    dataField: 'Unit_Number',\n    text: 'Unit Number',\n    sort: true\n  }, {\n    dataField: 'Email',\n    text: 'Email Address',\n    sort: true\n  }, {\n    dataField: 'Area_Name',\n    text: 'Area Name',\n    sort: true\n  }, {\n    dataField: 'Street_Name',\n    text: 'Street Name',\n    sort: true\n  }, {\n    dataField: 'Location',\n    text: 'Location',\n    sort: true\n  }, {\n    dataField: 'NoOfBedrooms',\n    text: 'No Of Bedrooms',\n    sort: true\n  }, {\n    dataField: 'InspectionAssignedOn',\n    text: 'Inspection Assigned On',\n    sort: true\n  }, {\n  dataField: 'link',\n  text: 'ACTION',\n  formatter: (cell, row, rowIndex, formatExtraData) => {\n      \n    return (\n        <button className=\"btn btn-primary\"\n            onClick={() => {\n                navigate(row.Plot_Number);\n            }}\n        >\n        Check\n        </button>\n    )\n  }}];\n  \n  const defaultSorted = [{\n    dataField: 'name',\n    order: 'desc'\n  }];\n\n  const pagination = paginationFactory({\n    sizePerPage: 20,\n    hideSizePerPage: true,\n    prePageText: \"Previous\",\n    nextPageText: \"Next\",\n    withFirstAndLast: false,\n    hidePageListOnlyOnePage: true\n  });\n\n  useEffect(() => {\n    BackendService\n      .getReScheduledList()\n      .then((response) => {\n        setIsFetching(false);\n        console.log(response.data.data.data);\n        setRequests(JSON.parse(response.data.data.data));\n        console.log(requests)\n      });\n  }, []);\n\n    return (\n        <div className=\"container-fluid page-body-wrapper\">\n        <div className=\"main-panel\">\n          <div className=\"content-wrapper\">\n            <div className=\"row\">\n\n              <div className=\"col-lg-12 grid-margin stretch-card\">\n                <div className=\"card\">\n                  <div className=\"card-body\">\n                    <h4 className=\"card-title\">Re Scheduled List</h4>\n                    <div className=\"table-responsive\">\n                    {/* <SearchBar /> */}\n                    { isFetching ? (\n                        <Skeleton duration={3} height={20} count={5} />\n                    ) : (\n                    <>\n                    <BootstrapTable\n                        bootstrap4\n                        keyField=\"id\"\n                        data={ requests }\n                        striped\n                        condensed\n                        columns={ columns }\n                        defaultSorted={ defaultSorted }\n                        pagination={ pagination } \n                      />\n                    </>\n                    ) }\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n          </div>\n        </div>\n        </div>\n    )\n}\n","import axios from 'axios';\n\nconst apiBase = process.env.REACT_APP_API_URL;\n\n// Add a request interceptor\naxios.interceptors.request.use( config => {\n  const user = JSON.parse(localStorage.getItem('userData')) || {};\n\n  if(user && user.token){\n    const token = 'Bearer ' + user.token;\n    config.headers.Authorization =  token;\n  }\n  return config;\n});\n\nclass BackendService {\n  async getDashBoard() {\n    return await axios.post(apiBase + \"/app/LoadAssignedList\");\n  }\n\n  async getScheduledList() {\n    return await axios.post(apiBase + \"/app/ScheduledList\");\n  }\n  async getLoadForInspection(data) {\n    return await axios.post(apiBase + \"/app/LoadForInspection\", data);\n  }\n  async InsertCheckListResults(data) {\n    return await axios.post(apiBase + \"/app/InsertCheckListResults\", data);\n  }\n\n  async getInspectedList() {\n    return await axios.post(apiBase + \"/app/VisitedHistory\");\n  }\n\n  async getReScheduledList() {\n    return await axios.post(apiBase + \"/app/ReScheduledList\");\n  }\n\n  async ScheduleSiteVisit(data) {\n    return await axios.post(apiBase + \"/app/ScheduleSiteVisit\", data);\n  }\n\n  async getPmBoard() {\n    return await axios.get(\"/api/test/pm\");\n  }\n\n  async getAdminBoard() {\n    return await axios.get(\"/api/test/admin\");\n  }\n}\n\nexport default new BackendService();"],"sourceRoot":""}