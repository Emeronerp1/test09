{"version":3,"sources":["pages/Dashboard.js","services/BackendService.js"],"names":["Dashboard","history","useHistory","useState","requests","setRequests","isFetching","setIsFetching","columns","Search","SearchBar","dataField","text","formatter","cell","row","rowIndex","formatExtraData","className","onClick","push","navigate","UnitId","sort","pagination","paginationFactory","sizePerPage","hideSizePerPage","prePageText","nextPageText","withFirstAndLast","hidePageListOnlyOnePage","showTotal","useEffect","BackendService","getDashBoard","then","response","console","log","data","JSON","parse","duration","height","count","bootstrap4","keyField","options","noDataText","striped","condensed","defaultSorted","order","apiBase","process","axios","interceptors","request","use","config","user","localStorage","getItem","token","headers","Authorization","a","post","get"],"mappings":"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","file":"static/js/10.6d8bad1e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport BackendService from \"../services/BackendService\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport { Link, useHistory } from 'react-router-dom';\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton'\nimport 'react-loading-skeleton/dist/skeleton.css'\n\n\nexport default function Dashboard() {\n  const history = useHistory();\n  const [requests, setRequests] = useState([]);\n  const [isFetching, setIsFetching] = useState(true);\n\n  const navigate = (row) => {\n    history.push(`/scheduleSiteVisit/${row}`);\n  }\n\n  const { SearchBar } = Search;\n  const columns = [{\n    dataField: 'link',\n    text: 'Open For Schedule',\n    formatter: (cell, row, rowIndex, formatExtraData) => {\n        \n      return (\n          <button className=\"btn btn-primary\"\n              onClick={() => {\n                  navigate(row.UnitId);\n              }}\n          >\n          Open For Schedule\n          </button>\n      )\n    }}, {\n      dataField: 'RequestType',\n      text: 'Request Type',\n      sort: false\n      },{\n        dataField: 'DateOfRequest',\n        text: 'Date of Request',\n        sort: false\n    },{\n      dataField: 'PropertyType',\n      text: 'Property Type',\n      sort: false\n    }, {\n    dataField: 'Classifications',\n    text: 'Classifications',\n    sort: false\n  }, {\n    dataField: 'Name',\n    text: 'Name',\n    sort: false\n  }, {\n    dataField: 'Email',\n    text: 'Email',\n    sort: false\n  }, {\n    dataField: 'Mobile',\n    text: 'Mobile',\n    sort: false\n  }, {\n    dataField: 'UnitId',\n    text: 'Unit ID',\n    sort: false\n  }, {\n    dataField: 'Plot_Number',\n    text: 'Plot Number',\n    sort: false\n  }, {\n    dataField: 'Unit_Number',\n    text: 'Unit Number',\n    sort: false\n  }, {\n    dataField: 'Floor_Number',\n    text: 'Floor Number',\n    sort: false\n  }, {\n    dataField: 'Area_Name',\n    text: 'Area Name',\n    sort: false\n  }, {\n    dataField: 'Street_Name',\n    text: 'Street Name',\n    sort: false\n  }, {\n    dataField: 'Location',\n    text: 'Loation',\n    sort: false\n  }, {\n    dataField: 'NoOfBedrooms',\n    text: 'No Of BedRooms',\n    sort: false\n  }, {\n    dataField: 'InspectionAssignedOn',\n    text: 'Inspection Assigned On',\n    sort: false\n  }\n];\n  \n  const defaultSorted = [{\n    dataField: 'name',\n    order: 'desc'\n  }];\n\n  const pagination = paginationFactory({\n    sizePerPage: 50,\n    hideSizePerPage: true,\n    prePageText: \"Previous\",\n    nextPageText: \"Next\",\n    withFirstAndLast: false,\n    hidePageListOnlyOnePage: true,\n    showTotal: false\n  });\n\n  useEffect(() => {\n    BackendService\n      .getDashBoard()\n      .then((response) => {\n        setIsFetching(false);\n        console.log(response.data.data.data)\n        setRequests(JSON.parse(response.data.data.data));\n      });\n  }, []);\n\n    return (\n        <div className=\"container-fluid page-body-wrapper\">\n        <div className=\"main-panel\">\n          <div className=\"content-wrapper\">\n            <div className=\"row\">\n\n              <div className=\"col-lg-12 grid-margin stretch-card\">\n                <div className=\"card\">\n                  <div className=\"card-body\">\n                    <h4 className=\"card-title\">Assigned List</h4>\n                    <div className=\"table-responsive\">\n                    { isFetching ? (\n                        <Skeleton duration={2} height={50} count={5} />\n                    ) : (\n                    <>\n                    <BootstrapTable\n                        bootstrap4\n                        keyField=\"id\"\n                        options={{ noDataText: 'There is no data to display' }}\n                        data={ requests }\n                        striped\n                        condensed\n                        columns={ columns }\n                        defaultSorted={ defaultSorted }\n                        pagination={ pagination } \n                      />\n                    </>\n                    ) }\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n          </div>\n        </div>\n        </div>\n    )\n}\n","import axios from 'axios';\n\nconst apiBase = process.env.REACT_APP_API_URL;\n\n// Add a request interceptor\naxios.interceptors.request.use( config => {\n  const user = JSON.parse(localStorage.getItem('userData')) || {};\n\n  if(user && user.token){\n    const token = 'Bearer ' + user.token;\n    config.headers.Authorization =  token;\n  }\n  return config;\n});\n\nclass BackendService {\n  async getDashBoard() {\n    return await axios.post(apiBase + \"/app/LoadAssignedList\");\n  }\n\n  async getScheduledList() {\n    return await axios.post(apiBase + \"/app/ScheduledList\");\n  }\n  async getLoadForInspection(data) {\n    return await axios.post(apiBase + \"/app/LoadForInspection\", data);\n  }\n  async InsertCheckListResults(data) {\n    return await axios.post(apiBase + \"/app/InsertCheckListResults\", data);\n  }\n\n  async CompleteInspection(data) {\n    return await axios.post(apiBase + \"/app/CompleteInspection\", data);\n  }\n\n  async getInspectedList() {\n    return await axios.post(apiBase + \"/app/VisitedHistory\");\n  }\n\n  async getReScheduledList() {\n    return await axios.post(apiBase + \"/app/ReScheduledList\");\n  }\n\n  async ScheduleSiteVisit(data) {\n    return await axios.post(apiBase + \"/app/ScheduleSiteVisit\", data);\n  }\n\n  async getInspectionReport(data) {\n    return await axios.post(apiBase + \"/app/Inspectedlist\", data);\n  }\n\n  async getPmBoard() {\n    return await axios.get(\"/api/test/pm\");\n  }\n\n  async getAdminBoard() {\n    return await axios.get(\"/api/test/admin\");\n  }\n}\n\nexport default new BackendService();"],"sourceRoot":""}