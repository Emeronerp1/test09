{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/utils/isWeb.ts","../../src/utils/isProxyEnabled.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/getFieldsValues.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/remove.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/utils/isFileInput.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/skipValidation.ts","../../src/utils/isFunction.ts","../../src/utils/isString.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/utils/getValidationModes.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/Subject.ts","../../src/useForm.ts"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","_toConsumableArray","arr","arrayLikeToArray","iter","Object","from","element","type","isObjectType","isNullOrUndefined","Date","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","displayName","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","keys","formStateData","omit","isEmptyObject","find","window","HTMLElement","document","isWeb","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","field","_f","ref","focus","refs","getFieldsValues","fieldsRef","output","disabled","every","deepEqual","object1","object2","isErrorObject","isPrimitive","keys1","keys2","val1","val2","deepMerge","target","targetValue","sourceValue","setDirtyFields","values","defaultValues","dirtyFields","parentNode","parentName","slice","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","data","isBoolean","defaultResult","isValid","validResult","options","option","checked","map","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","fieldsRefs","criteriaMode","mounted","required","min","max","maxLength","minLength","pattern","validate","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","isString","RegExp","getValidateError","validationData","isRegex","a","inputValue","mount","error","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","mode","isOnSubmit","tearDowns","tearDown","this","push","teardown","observer","subscription","closed","add","observers","subscriber","isWindowUndefined","useForm","reValidateMode","resolver","context","shouldFocusError","shouldUnregister","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","updateFormState","resolverRef","formStateRef","defaultValuesRef","fieldArrayDefaultValuesRef","contextRef","inFieldArrayActionRef","isMountedRef","subjectsRef","watch","control","array","state","namesRef","Set","unMount","watchAll","validationMode","getValidationModes","isValidateAllFieldCriteria","isFieldWatched","has","shouldRenderBaseOnError","shouldSkipRender","inputState","isValidFromResolver","isWatched","previousError","validateForm","updatedFormState","setFieldValue","rawValue","shouldRender","shouldRegister","register","isHTMLElement","forEach","radioRef","selectRef","includes","checkboxRef","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","getIsDirty","formValues","isCurrentTouched","isChanged","previousIsDirty","isPreviousFieldDirty","isCurrentFieldDirty","isPreviousFieldTouched","executeInlineValidation","skipReRender","validateField","executeResolverValidation","shouldCheckValid","valid","fieldError","fieldNames","convertToArrayPayload","schemaResult","Promise","all","fieldName","shouldFocus","updateIsValid","updateIsValidAndInputValue","isValueUndefined","defaultChecked","setInternalValues","inputKey","setValue","isFieldArray","isReset","setFieldArrayDirtyFields","getValues","handleChange","inputType","shouldSkipValidation","hasValidation","skipValidation","parentNodeName","currentError","clearErrors","inputName","setError","watchInternal","isGlobal","isArrayNames","fieldValues","subscribe","info","unregister","delete","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","keepIsValid","registerFieldRef","isRadioOrCheckboxFunction","contains","onChange","onBlur","shouldUnmount","handleSubmit","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","registerAbsentFields","reset","keepStateOptions","updatedValues","keepValues","inputRef","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","formStateSubscription","shouldRenderFormState","useFieldArraySubscription","unsubscribe","isLiveInDom","getProxyFormState"],"mappings":"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","file":"static/js/2.ae30a58e.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\n\nexport default isProxyEnabled;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  output: FieldValues = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f && _f.ref\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      current &&\n        getFieldsValues(\n          {\n            current,\n          },\n          output[name],\n        );\n    }\n  }\n\n  return output;\n};\n\nexport default getFieldsValues;\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n  criteriaMode?: CriteriaMode,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n  };\n};\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  mounted &&\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport getResolverOptions from './logic/getResolverOptions';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const resolverRef = React.useRef(resolver);\n  const formStateRef = React.useRef(formState);\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const defaultValuesRef =\n    React.useRef<DefaultValues<TFieldValues>>(defaultValues);\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const contextRef = React.useRef(context);\n  const inFieldArrayActionRef = React.useRef(false);\n  const isMountedRef = React.useRef(false);\n  const subjectsRef: Subjects<TFieldValues> = React.useRef({\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  });\n  const namesRef = React.useRef<Names>({\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n    watchAll: false,\n  });\n\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  resolverRef.current = resolver;\n  contextRef.current = context;\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    namesRef.current.watchAll ||\n    namesRef.current.watch.has(name) ||\n    namesRef.current.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const shouldRenderBaseOnError = React.useCallback(\n    async (\n      shouldSkipRender: boolean,\n      name: InternalFieldName,\n      error?: FieldError,\n      inputState?: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      },\n      isValidFromResolver?: boolean,\n      isWatched?: boolean,\n    ): Promise<void> => {\n      const previousError = get(formStateRef.current.errors, name);\n      const isValid = readFormStateRef.current.isValid\n        ? resolver\n          ? isValidFromResolver\n          : await validateForm(fieldsRef.current, true)\n        : false;\n\n      error\n        ? set(formStateRef.current.errors, name, error)\n        : unset(formStateRef.current.errors, name);\n\n      if (\n        (isWatched ||\n          (error ? !deepEqual(previousError, error, true) : previousError) ||\n          !isEmptyObject(inputState) ||\n          formStateRef.current.isValid !== isValid) &&\n        !shouldSkipRender\n      ) {\n        const updatedFormState = {\n          ...inputState,\n          isValid: !!isValid,\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        subjectsRef.current.state.next(isWatched ? { name } : updatedFormState);\n      }\n\n      subjectsRef.current.state.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const field = get(fieldsRef.current, name);\n\n      if (field) {\n        const _f = (field as Field)._f;\n\n        if (_f) {\n          const value =\n            isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n              ? ''\n              : rawValue;\n          _f.value = getFieldValueAs(rawValue, _f);\n\n          if (isRadioInput(_f.ref)) {\n            (_f.refs || []).forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === value),\n            );\n          } else if (isFileInput(_f.ref) && !isString(value)) {\n            _f.ref.files = value as FileList;\n          } else if (isMultipleSelect(_f.ref)) {\n            [..._f.ref.options].forEach(\n              (selectRef) =>\n                (selectRef.selected = (value as string[]).includes(\n                  selectRef.value,\n                )),\n            );\n          } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(value)\n                      ? !!(value as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : value === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!value);\n          } else {\n            _f.ref.value = value;\n          }\n\n          if (shouldRender) {\n            const values = getFieldsValues(fieldsRef);\n            set(values, name, rawValue);\n            subjectsRef.current.control.next({\n              values: {\n                ...defaultValuesRef.current,\n                ...values,\n              } as DefaultValues<TFieldValues>,\n              name,\n            });\n          }\n\n          (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirtyState(name, value, options.shouldTouch);\n          options.shouldValidate && trigger(name as Path<TFieldValues>);\n        } else {\n          field._f = {\n            ref: {\n              name,\n              value: rawValue,\n            },\n            value: rawValue,\n          };\n        }\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateTouchAndDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      isCurrentTouched?: boolean,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      const state: Partial<FormState<TFieldValues>> & { name: string } = {\n        name,\n      };\n      let isChanged = false;\n\n      if (readFormStateRef.current.isDirty) {\n        const previousIsDirty = formStateRef.current.isDirty;\n        formStateRef.current.isDirty = getIsDirty();\n        state.isDirty = formStateRef.current.isDirty;\n        isChanged = previousIsDirty !== state.isDirty;\n      }\n\n      if (readFormStateRef.current.dirtyFields && !isCurrentTouched) {\n        const isPreviousFieldDirty = get(\n          formStateRef.current.dirtyFields,\n          name,\n        );\n        const isCurrentFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        isCurrentFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n        state.dirtyFields = formStateRef.current.dirtyFields;\n        isChanged =\n          isChanged ||\n          isPreviousFieldDirty !== get(formStateRef.current.dirtyFields, name);\n      }\n\n      const isPreviousFieldTouched = get(\n        formStateRef.current.touchedFields,\n        name,\n      );\n\n      if (isCurrentTouched && !isPreviousFieldTouched) {\n        set(formStateRef.current.touchedFields, name, isCurrentTouched);\n        state.touchedFields = formStateRef.current.touchedFields;\n        isChanged =\n          isChanged ||\n          (readFormStateRef.current.touchedFields &&\n            isPreviousFieldTouched !== isCurrentTouched);\n      }\n\n      isChanged && shouldRender && subjectsRef.current.state.next(state);\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeInlineValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender: boolean,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(skipReRender, name, error);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeResolverValidation = React.useCallback(\n    async (names?: InternalFieldName[]) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        getResolverOptions(\n          namesRef.current.mount,\n          fieldsRef.current,\n          criteriaMode,\n        ),\n      );\n\n      if (names) {\n        for (const name of names) {\n          const error = get(errors, name);\n          error\n            ? set(formStateRef.current.errors, name, error)\n            : unset(formStateRef.current.errors, name);\n        }\n      } else {\n        formStateRef.current.errors = errors;\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (\n    fieldsRef: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (shouldCheckValid) {\n            if (fieldError[_f.name]) {\n              context.valid = false;\n              break;\n            }\n          } else {\n            fieldError[_f.name]\n              ? set(formStateRef.current.errors, _f.name, fieldError[_f.name])\n              : unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name, options = {}) => {\n      const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n      let isValid;\n\n      subjectsRef.current.state.next({\n        isValidating: true,\n      });\n\n      if (resolver) {\n        const schemaResult = await executeResolverValidation(\n          isUndefined(name) ? name : fieldNames,\n        );\n        isValid = name\n          ? fieldNames.every((name) => !get(schemaResult, name))\n          : isEmptyObject(schemaResult);\n      } else {\n        if (name) {\n          isValid = (\n            await Promise.all(\n              fieldNames\n                .filter((fieldName) => get(fieldsRef.current, fieldName))\n                .map(\n                  async (fieldName) =>\n                    await executeInlineValidation(fieldName, true),\n                ),\n            )\n          ).every(Boolean);\n        } else {\n          await validateForm(fieldsRef.current);\n          isValid = isEmptyObject(formStateRef.current.errors);\n        }\n      }\n\n      subjectsRef.current.state.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n      });\n\n      if (options.shouldFocus && !isValid) {\n        focusFieldBy(\n          fieldsRef.current,\n          (key) => get(formStateRef.current.errors, key),\n          fieldNames,\n        );\n      }\n\n      readFormStateRef.current.isValid && updateIsValid();\n\n      return isValid;\n    },\n    [executeResolverValidation, executeInlineValidation],\n  );\n\n  const updateIsValidAndInputValue = (name: InternalFieldName, ref?: Ref) => {\n    const field = get(fieldsRef.current, name) as Field;\n\n    if (field) {\n      const isValueUndefined = isUndefined(field._f.value);\n      const defaultValue = isValueUndefined\n        ? get(defaultValuesRef.current, name)\n        : field._f.value;\n\n      if (!isUndefined(defaultValue)) {\n        if (ref && (ref as HTMLInputElement).defaultChecked) {\n          field._f.value = getFieldValue(field);\n        } else if (isNameInFieldArray(namesRef.current.array, name)) {\n          field._f.value = defaultValue;\n        } else {\n          setFieldValue(name, defaultValue);\n        }\n      } else if (isValueUndefined) {\n        field._f.value = getFieldValue(field);\n      }\n    }\n\n    isMountedRef.current && readFormStateRef.current.isValid && updateIsValid();\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const isValid = resolver\n        ? isEmptyObject(\n            (\n              await resolverRef.current!(\n                {\n                  ...getFieldsValues(fieldsRef),\n                  ...values,\n                },\n                contextRef.current,\n                getResolverOptions(\n                  namesRef.current.mount,\n                  fieldsRef.current,\n                  criteriaMode,\n                ),\n              )\n            ).errors,\n          )\n        : await validateForm(fieldsRef.current, true);\n\n      isValid !== formStateRef.current.isValid &&\n        subjectsRef.current.state.next({\n          isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = namesRef.current.array.has(name);\n\n        isFieldArray || !isPrimitive(inputValue) || (field && !field._f)\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = namesRef.current.array.has(name);\n\n    if (isFieldArray) {\n      subjectsRef.current.array.next({\n        values: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        subjectsRef.current.state.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    ((field && !field._f) || isFieldArray) && !isNullOrUndefined(value)\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && subjectsRef.current.state.next({});\n    subjectsRef.current.watch.next({ name, values: getValues() });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolver &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const inputState = updateTouchAndDirtyState(\n          name,\n          field._f.value,\n          isBlurEvent,\n          false,\n        );\n\n        const shouldRender = !isEmptyObject(inputState) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            subjectsRef.current.watch.next({\n              name,\n              type,\n              values: getValues(),\n            });\n          return (\n            shouldRender &&\n            subjectsRef.current.state.next(\n              isWatched ? { name } : { ...inputState, name },\n            )\n          );\n        }\n\n        subjectsRef.current.state.next({\n          isValidating: true,\n        });\n\n        if (resolver) {\n          const { errors } = await resolverRef.current!(\n            getFieldsValues(fieldsRef),\n            contextRef.current,\n            getResolverOptions([name], fieldsRef.current, criteriaMode),\n          );\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          subjectsRef.current.watch.next({\n            name,\n            type,\n            values: getValues(),\n          });\n        shouldRenderBaseOnError(\n          false,\n          name,\n          error,\n          inputState,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...defaultValuesRef.current,\n      ...getFieldsValues(fieldsRef),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    subjectsRef.current.state.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    subjectsRef.current.state.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal, formValues) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues =\n        formValues || isMountedRef.current\n          ? {\n              ...defaultValuesRef.current,\n              ...(formValues || getFieldsValues(fieldsRef)),\n            }\n          : isUndefined(defaultValue)\n          ? defaultValuesRef.current\n          : isArrayNames\n          ? defaultValue\n          : { [fieldNames as InternalFieldName]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (namesRef.current.watchAll = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of convertToArrayPayload(fieldNames)) {\n        isGlobal && namesRef.current.watch.add(fieldName as InternalFieldName);\n        result.push(get(fieldValues, fieldName as InternalFieldName));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? subjectsRef.current.watch.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : namesRef.current.mount) {\n      namesRef.current.mount.delete(inputName);\n      namesRef.current.array.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n\n        subjectsRef.current.watch.next({\n          name: inputName,\n          values: getValues(),\n        });\n      }\n    }\n\n    subjectsRef.current.state.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    updateIsValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options = {}) => {\n      const field = get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(field && field._f ? field._f : { ref: { name } }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      namesRef.current.mount.add(name);\n      !field && updateIsValidAndInputValue(name);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name, {}) as Field;\n                const shouldUnmount =\n                  shouldUnregister || options.shouldUnregister;\n\n                if (field._f) {\n                  field._f.mount = false;\n                  // If initial state of field element is disabled,\n                  // value is not set on first \"register\"\n                  // re-sync the value in when it switched to enabled\n                  if (isUndefined(field._f.value)) {\n                    field._f.value = field._f.ref.value;\n                  }\n                }\n\n                shouldUnmount &&\n                  !(\n                    isNameInFieldArray(namesRef.current.array, name) &&\n                    inFieldArrayActionRef.current\n                  ) &&\n                  namesRef.current.unMount.add(name);\n              }\n            },\n          };\n    },\n    [],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(fieldsRef);\n\n      subjectsRef.current.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolver) {\n          const { errors, values } = await resolverRef.current!(\n            fieldValues,\n            contextRef.current,\n            getResolverOptions(\n              namesRef.current.mount,\n              fieldsRef.current,\n              criteriaMode,\n            ),\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          subjectsRef.current.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key) => get(formStateRef.current.errors, key),\n              namesRef.current.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        subjectsRef.current.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const registerAbsentFields = <T extends DefaultValues<TFieldValues>>(\n    defaultValues: T,\n    name = '',\n  ): void => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(fieldsRef.current, fieldName);\n\n      if (!field || !field._f) {\n        if (isObject(value) || Array.isArray(value)) {\n          registerAbsentFields(value, fieldName);\n        } else if (!field) {\n          register(fieldName as Path<TFieldValues>, { value });\n        }\n      }\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of namesRef.current.mount) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      subjectsRef.current.control.next({\n        values: { ...updatedValues },\n      });\n\n      subjectsRef.current.watch.next({\n        values: { ...updatedValues },\n      });\n\n      subjectsRef.current.array.next({\n        values: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      !shouldUnregister &&\n      registerAbsentFields({ ...updatedValues });\n\n    namesRef.current = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n    };\n\n    subjectsRef.current.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? formStateRef.current.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? formStateRef.current.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(values, defaultValuesRef.current)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? formStateRef.current.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? formStateRef.current.dirtyFields\n        : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? formStateRef.current.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    isMountedRef.current = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n\n    const formStateSubscription = subjectsRef.current.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = subjectsRef.current.array.subscribe({\n      next(state) {\n        if (state.values && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.values);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    if (!isMountedRef.current) {\n      isMountedRef.current = true;\n      readFormStateRef.current.isValid && updateIsValid();\n    }\n\n    for (const name of namesRef.current.unMount) {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    namesRef.current.unMount = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        inFieldArrayActionRef,\n        getIsDirty,\n        subjectsRef,\n        watchInternal,\n        fieldsRef,\n        updateIsValid,\n        namesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister,\n        shouldUnmount: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n"],"sourceRoot":""}